import .basic .monster .presentation .suzuki .higman_sims .mclaughlin .conway_groups .mathieu_group
import tactic.fattribute
import tactic.metadata
noncomputable theory
open monster suzuki higman_sims mclaughlin conway_groups mathieu_group is_monoid_action coxeter_vertices
open category_theory (mk_ob)
local infix ` ≅ `:60 := isomorphic
local notation `⟪`:50 a `⟫`:50 := free_group.of a
local notation h :: t  := dvector.cons h t
local notation `[` l:(foldr `, ` (h t, dvector.cons h t) dvector.nil `]`) := l
local infix ` ↑↑ `:65 := right_conjugation

/- the first happy family, a.k.a. Mathieu groups -/

/-- The group $M_{11}$ is the stabilizer of an arbitrary point of the steiner system $S(5,6,12)$
  under the evaluation action of its Automorphism group.-/
@[fabstract]
def M11 : Group :=
mk_ob $ stabilizer (evaluation_action s_5_6_12)
  (classical.choice $ nonempty_steiner_system dec_trivial)

/--The group $M_{12}$ is the automorphism group of the steiner system $S(5,6,12)$.-/
@[fabstract]
def M12 : Group := mk_ob $ Aut(s_5_6_12)

/-- The group $M_{22}$ is the stabilizer of two arbitrary points of the steiner system $S(5,8,24)$
  under the evaluation action of its automorphism group. -/
@[fabstract]
def M22 : Group :=
have H : ∃x : s_5_8_24 × s_5_8_24, x.1 ≠ x.2, from omitted,
mk_ob $ two_pt_stabilizer (evaluation_action s_5_8_24) (classical.some_spec H)

/-- The group $M_{23}$ is the stabilizer of an arbitrary point of the steiner system $S(5,8,24)$
  under the evaluation action of its automorphism group.-/
@[fabstract]
def M23 : Group :=
mk_ob $ stabilizer (evaluation_action s_5_8_24)
  (classical.choice $ nonempty_steiner_system dec_trivial)

/-- The group $M_{24}$ is the automorphism group of the steiner system $S(5,8,24)$. -/
@[fabstract]
def M24 : Group := mk_ob $ Aut(s_5_8_24)

/- the second happy family -/

/-- the Conway group Co₁ -/
@[fabstract]
def Co1 : Group := Co1
/-- the Conway group Co₂ -/
@[fabstract]
def Co2 : Group := Co2
/-- the Conway group Co₃ -/
@[fabstract]
def Co3 : Group := Co3
/-- the McLaughlin group -/
@[fabstract]
def McL : Group := McL
/-- the Higman–Sims group -/
@[fabstract]
def HS : Group := HS

namespace J2
def a : free_group $ dfin 4 := ⟪(by to_dfin 0)⟫
def b : free_group $ dfin 4 := ⟪(by to_dfin 1)⟫
def u : free_group $ dfin 4 := ⟪(by to_dfin 2)⟫
def v : free_group $ dfin 4 := ⟪(by to_dfin 3)⟫
end J2
section J2
open J2
/-- the Hall-Janko group J₂ -/
/- From the corresponding entry in the atlas of finite groups -/
@[fabstract]
def J2 : Group :=
⟪dfin 4 | {a * b * u ⁻¹, a * b⁻¹ * v ⁻¹, a^2, b^3, u^15,
  (u^4 * v^2 * u^3 * v^3)^2, (u^3 * v * (u^2 * v^2)^2)^2} ⟫
end J2

/-- the Suzuki sporadic group -/
@[fabstract]
def Suz : Group := Suz

/- THE THIRD HAPPY FAMILY -/

-- todo: move monster here

/-- The baby monster group B is defined as follows:
if x be any element in conjugacy class 2A,
then the centralizer C_M(x) is 2 ⬝ B, so B ≅ C_M(x)/Z(C_M(x)) -/
@[fabstract]
def BabyMonster : Group :=
let C := conj_class Monster 2 'A' in
let x := classical.some C.1.2 in
let Cx : set Monster := centralizer {x} in
mk_ob $ quotient_group.quotient $ is_subgroup.center $ Cx

/-- Fi24 is characterized by 3 ⬝ Fi24 ≅ N_M(x) where x is any element in conjugacy class 3A.
  The derived subgroup of this group is the sporadic group Fi24' -/
/- todo: double check that quotienting out the span of x indeed gives Fi24. -/
@[fabstract]
def Fi24 : Group :=
let C := conj_class Monster 3 'A' in
let x := classical.some C.1.2 in
let N_Mx : set Monster := normalizer $ group.closure {x} in
let span_x : set N_Mx := induced_subgroup (group.closure {x}) N_Mx in
by exact mk_ob (quotient_group.quotient span_x)

/-- The Fischer group Fi24' -/
@[fabstract]
def Fi24' : Group :=
mk_ob $ derived_subgroup Fi24

/- A 3-transposition group is a “finite group G generated by a conjugacy class D of involutions, such that any two elements of D have a product of order at most 3, and … such that G’ = G” and any normal 2- or 3-subgroup of G is central. The elements of D are known as 3-transpositions, or just transpositions if there is no risk of confusion”  -/
@[fabstract]
def Y432 : Group := coxeter_group $ matrix_of_graph (coxeter_edges [4,3,2])

namespace Fi23
def a : Y432 := generated_of $ torso
def b₁ : Y432 := generated_of $ arm (by to_dfin 0) (by to_dfin 0)
def c₁ : Y432 := generated_of $ arm (by to_dfin 0) (by to_dfin 1)
def b₂ : Y432 := generated_of $ arm (by to_dfin 1) (by to_dfin 0)
def c₂ : Y432 := generated_of $ arm (by to_dfin 1) (by to_dfin 1)
def b₃ : Y432 := generated_of $ arm (by to_dfin 2) (by to_dfin 0)
def c₃ : Y432 := generated_of $ arm (by to_dfin 2) (by to_dfin 1)
end Fi23
section Fi23
open Fi23
/- We define Fi23 following p 232 of the atlas -/
/-- the Fischer group Fi23 -/
@[fabstract]
def Fi23 : Group :=
  category_theory.mk_ob $ quotient_group.quotient $
    is_subgroup.center $ (Y432)/⟪{(a*b₁*c₁*a*b₂*c₂*a*b₃*c₃)^10}⟫
end Fi23

/- We define Fi22 following p 162 of the atlas -/
/-- the Fischer group Fi22 -/
def Y332 : Group := coxeter_group $ matrix_of_graph (coxeter_edges [3,3,2])

namespace Fi22
def a : Y332 := generated_of $ arm (by to_dfin 1) (by to_dfin 2)
def b : Y332 := generated_of $ arm (by to_dfin 1) (by to_dfin 1)
def c : Y332 := generated_of $ arm (by to_dfin 1) (by to_dfin 0)
def d : Y332 := generated_of $ torso
def e : Y332 := generated_of $ arm (by to_dfin 0) (by to_dfin 0)
def f : Y332 := generated_of $ arm (by to_dfin 0) (by to_dfin 1)
def g : Y332 := generated_of $ arm (by to_dfin 0) (by to_dfin 2)
def h : Y332 := generated_of $ arm (by to_dfin 2) (by to_dfin 0)
def i : Y332 := generated_of $ arm (by to_dfin 2) (by to_dfin 1)
end Fi22
section Fi22
open Fi22
@[fabstract]
def Fi22 : Group := Y332/⟪{(a*b*c*d*e*f*h)^9, (b*c*d*e*f*g*h)^9, (b*c*d*e*f*d*h*i*d)^10}⟫
end Fi22

/-- the Thompson Group is C_M(x)/<x> for some element x in 3C -/
@[fabstract]
def Th : Group :=
let C := conj_class Monster 3 'C' in
let x := classical.some C.1.2 in
let C_Mx : set Monster := centralizer {x} in
let span_x : set C_Mx := induced_subgroup (group.closure {x}) C_Mx in
by exact mk_ob (quotient_group.quotient span_x)

/-- the Harada–Norton group	is C_M(x)/<x> for some element x in 5A -/
@[fabstract]
def HN : Group :=
let C := conj_class Monster 5 'A' in
let x := classical.some C.1.2 in
let C_Mx : set Monster := centralizer {x} in
let span_x : set C_Mx := induced_subgroup (group.closure {x}) C_Mx in
by exact mk_ob (quotient_group.quotient span_x)

/-- the Held group is C_M(x)/<x> for some element x in 7A -/
@[fabstract]
def He : Group :=
let C := conj_class Monster 7 'A' in
let x := classical.some C.1.2 in
let C_Mx : set Monster := centralizer {x} in
let span_x : set C_Mx := induced_subgroup (group.closure {x}) C_Mx in
by exact mk_ob (quotient_group.quotient span_x)

/- the pariahs  -/

theorem J1_char : ∃!(G : Group.{0}), ∃(h : fintype G),
by { exactI
  simple_group G ∧
  (∃(s : set G), is_Sylow_subgroup 2 s ∧ commutative_on s) ∧
  (∃x : G, x*x = 1 ∧ mk_ob (centralizer {x} : set G) ≅
    mk_ob (cyclic_group 2 × alternating_group 5)) } :=
omitted

/-- the Janko group J₁ -/
@[fabstract]
def J1 : Group := classical.some J1_char
namespace J3
def a := ⟪ff⟫
def b := ⟪tt⟫
end J3
section J3
open J3
/-- the Janko group J₃ -/
/- From http://brauer.maths.qmul.ac.uk/Atlas/v3/pres/J3G1-P1:

  Presentation 	〈 a, b | a2 = b3 = (ab)19 = [a, b]9 = ((ab)6(ab−1)5)2 = ((ababab−1)2abab−1ab−1abab−1)2 = abab(abab−1)3abab(abab−1)4ab−1(abab−1)3 = (ababababab−1abab−1)4 = 1 〉 -/
@[fabstract]
def J3 : Group :=
⟪bool | {a^2, b^3, (a*b)^19, ⟦a, b⟧^9, ((a*b)^6*(a*b⁻¹)^5)^2,
  ((a*b*a*b*a*(b⁻¹))^2*a*b*a*b⁻¹*a*b⁻¹*a*b*a*b⁻¹)^2,
  a*b*a*b*(a*b*a*b⁻¹)^3*a*b*a*b*(a*b*a*b⁻¹)^4*a*b⁻¹*(a*b*a*b⁻¹)^3,
  (a*b*a*b*a*b*a*b*a*b⁻¹*a*b*a*b⁻¹)^4}⟫
end J3

/- Presentation of the Lyons group, following section 3B of the paper
   Volker Gebhardt, Two "Short" Presentations for Lyons' Sporadic Simple Group
   https://projecteuclid.org/download/pdf_1/euclid.em/1045604668, p 335-6 -/

namespace Ly
def a : free_group $ dfin 5 := ⟪by to_dfin 0⟫
def b : free_group $ dfin 5 := ⟪by to_dfin 1⟫
def c : free_group $ dfin 5 := ⟪by to_dfin 2⟫
def d : free_group $ dfin 5 := ⟪by to_dfin 3⟫
def z : free_group $ dfin 5 := ⟪by to_dfin 4⟫

-- testing binding strength
-- example {α : Type*} [group α] (x y z w : α) : x * y * w ↑↑ z = (x * y * w) ↑↑ z := by refl
-- example {α : Type*} [group α] (x y z w : α) : x ↑↑ z * y * w = x ↑↑ (z * y * w) := by refl
-- example {α : Type*} [group α] (x y z w : α) : x ↑↑ z⁻¹ = x ↑↑ (z⁻¹) := by refl


def RH₃ : set $ free_group $ dfin 5 := {a^8, b^5, (a*b)^4, ⟦a^2,b⟧, ⟦a,b⟧^3}

def RH₂ : set $ free_group $ dfin 5 :=
  RH₃ ∪ { c^5, c^3 * (c ↑↑ (a^2))⁻¹,
  (c ↑↑ b * a)⁻¹ * (c ↑↑ a^2 * b) * c * b * c * b ⁻¹,
  (c ↑↑ b^2)⁻¹ * c^2 * (c ↑↑ b⁻¹) * ((c ↑↑ b)⁻¹)^2 }

def RH₁ : set $ free_group $ dfin 5 :=
  { (a * b⁻¹ * a ↑↑ d)⁻¹ * a * b⁻¹ * a^5,
  (b^2 * a ⁻¹ ↑↑ d)⁻¹ * (a⁻¹)^2*b^2 * a⁻¹,
  ((b*a*c⁻¹*b*a*(b⁻¹)^2*a) ↑↑ d)⁻¹ * c * d, a⁻¹*b*a⁻¹*b⁻¹*a*(b⁻¹)^2*a*c*b⁻¹*c*b*a*c⁻¹,
  ((a^2*c⁻¹*b*a*c⁻¹*b*a⁻¹*b⁻¹) ↑↑ d*c*d)⁻¹ * (a⁻¹)^2*b⁻¹*a⁻¹*(b⁻¹*c)^2*b^2,
  (b^2*a*c*b*a ↑↑ d*c*a⁻¹*b*c*d)⁻¹ * a⁻¹*b*a⁻¹*b⁻¹*a⁻¹*(b⁻¹)^2*c*a⁻¹*b⁻¹*c⁻¹*b*a,
  ((a * (c⁻¹)^2 *b) ↑↑ d*c*a⁻¹*b*c*d)⁻¹ * (a⁻¹)^4 * b^2 * c⁻¹*b⁻¹*a*b⁻¹*c*a*b⁻¹,
  c*a⁻¹*c⁻¹*a*c⁻¹*a⁻¹*c*a*d⁻¹*c⁻¹*a⁻¹*c⁻¹*a*c*a⁻¹*c*d*c*a*c⁻¹*a⁻¹*c⁻¹*a*c*d }

def RG : set $ free_group $ dfin 5 :=
  {(a ↑↑ z)⁻¹ * (a⁻¹)^3, (a ↑↑ z * d * z)⁻¹ * a^3,
   (c⁻¹ * d⁻¹ * c * b * a * b^2 * (c*b)^2 * c⁻¹ * d ↑↑ z * d * z)⁻¹ * c⁻¹*b*c^2 * a *
     c⁻¹*b*d⁻¹*c*a*c⁻¹*b*c⁻¹*(b⁻¹)^2 * c*a⁻¹*c* d⁻¹ * c* b^2 *c*d*a*d⁻¹*c⁻¹*d⁻¹*c*b*a⁻¹*b,
   ⟦z, d⁻¹*c⁻¹*b*a*b⁻¹*d⁻¹*c*d⁻¹*c⁻¹*d*c⁻¹*b⁻¹*a*b⁻¹*c*d⁻¹*c*d⟧⁻¹ * b * c* b⁻¹*c⁻¹,
   (a ↑↑ z*d*b⁻¹*z)⁻¹ * a⁻¹*d⁻¹*c⁻¹*b*(c⁻¹)^2*a*b⁻¹*c*a⁻¹*b^2*c*b⁻¹*c*a⁻¹*c⁻¹*d*b⁻¹*a⁻¹,
   (c⁻¹*a⁻¹*d⁻¹*c⁻¹ * b * a * b⁻¹ * a * c⁻¹ *b*c*a*c⁻¹*d⁻¹*c*d*a*c*b⁻¹*a*b*a*c ↑↑ z*d*b⁻¹*z)⁻¹ *
     a⁻¹*c*(a⁻¹)^3*c⁻¹*(b⁻¹)^2*c⁻¹*d*c⁻¹*a*c⁻¹*b^2*c*b⁻¹*c*a⁻¹*c⁻¹*d*b⁻¹*c⁻¹*d⁻¹*c⁻¹*b*a*b*d*c*a⁻¹,
   ((a⁻¹*b*d*c*a⁻¹*b⁻¹*a*b*a⁻¹*c⁻¹*b⁻¹*c*a)↑↑z*d*c*d*z)⁻¹*c⁻¹*a^3*b*c⁻¹*b⁻¹*a⁻¹*c*d⁻¹*c⁻¹*b*a⁻¹*b⁻¹,
   (d⁻¹*c*b*a⁻¹*b⁻¹ ↑↑ z*d*c*d*z)⁻¹*a*c*a⁻¹*b*a*c⁻¹*b*c*a*c⁻¹*b⁻¹*a⁻¹*b⁻¹*a*b*d⁻¹*c*a*c⁻¹*b⁻¹*c⁻¹*a,
   a*d⁻¹*c⁻¹*b*(a⁻¹)^2*d⁻¹*c⁻¹*(b⁻¹)^2*c⁻¹*d*c⁻¹*(a*c⁻¹)^2 *
     b*a⁻¹*c^2*b⁻¹*c*d⁻¹*c*a*c*b⁻¹*a*d⁻¹*z⁻¹*b*z*b⁻¹*z
   }
end Ly

section Ly
open Ly
/-We quote: the complete defining set RH₂ ∪ Rh₁ ∪ RG of relations for G with respect
  to the generators a,b,c,d and z contains 25 relations of total length 549-/

/-- the Lyons group -/
@[fabstract]
def Ly : Group := ⟪dfin 5 | RH₂ ∪ RH₁ ∪ RG ⟫
end Ly
/- Presentation for the O'Nan group, following the paper
   Leonard H. Soicher, A new existence and uniqueness proof for the O'Nan group,
   https://doi.org/10.1112/blms/22.2.148 (section 2)-/

/-                                8
   O'N := ⟨a (torso) --- b --- c --- d --- e --- f, g | relations⟩ -/

namespace O'N
def O'N_diagram :=
  annotate (annotated_graph_of_graph $ coxeter_edges [5])
    (arm (by to_dfin 0) (by to_dfin 1), arm (by to_dfin 0) (by to_dfin 2)) 8

noncomputable instance O'N_diagram_decidable_rel : decidable_rel $ O'N_diagram.edge :=
λ _ _, classical.prop_decidable _

def O'N_cover := coxeter_group' (matrix_of_annotated_graph O'N_diagram) unit

def a : O'N_cover := generated_of $ sum.inl $ torso
def b : O'N_cover := generated_of $ sum.inl $ arm (by to_dfin 0) (by to_dfin 0)
def c : O'N_cover := generated_of $ sum.inl $ arm (by to_dfin 0) (by to_dfin 1)
def d : O'N_cover := generated_of $ sum.inl $ arm (by to_dfin 0) (by to_dfin 2)
def e : O'N_cover := generated_of $ sum.inl $ arm (by to_dfin 0) (by to_dfin 3)
def f : O'N_cover := generated_of $ sum.inl $ arm (by to_dfin 0) (by to_dfin 4)
def g : O'N_cover := generated_of $ sum.inr $ ()
end O'N
section O'N
open O'N

/-- the O'Nan group -/
@[fabstract]
def O'N : Group :=
  O'N_cover/⟪{(a*f)⁻¹ * g^2, ((c*d)^4)⁻¹ * g^2, ⟦c,d*g*d*g⟧,
              ⟦d, c*g*c*g⟧, (b*c*d*g)^5, f⁻¹ * (d * g)^4,
              ((b*a)↑↑g)⁻¹ * b * a * ((b*a) ↑↑ c*g*c*g),
              ((e*f) ↑↑ g)⁻¹ * e * f * ((e*f)↑↑ d*g*d*g)}⟫
end O'N
/-
Atlas entry for J4 presented on its G2-`standard' generators.

G<x,y,t>:=Group<x,y,t| x^2, y^3, (x*y)^23, (x,y)^12, (x,y*x*y)^5,
(x*y*x*y*x*y^-1)^3*(x*y*x*y^-1*x*y^-1)^3, (x*y*(x*y*x*y^-1)^3)^4,
t^2, (t,x), (t,y*x*y*(x*y^-1)^2*(x*y)^3),
(y*t^(y*x*y^-1*x*y*x*y^-1*x))^3,
((y*x*y*x*y*x*y)^3*t*t^((x*y)^3*y*(x*y)^6*y))^2
>;
-/

namespace J4
def x : free_group $ dfin 3 := ⟪(by to_dfin 0)⟫
def y : free_group $ dfin 3 := ⟪(by to_dfin 1)⟫
def t : free_group $ dfin 3 := ⟪(by to_dfin 2)⟫
end J4
section J4
open J4
/-- the Janko group J₄ -/
@[fabstract]
def J4 : Group := ⟪ dfin 3 | {x^2, y^3, (x*y)^23, ⟦x,y⟧^12, ⟦x,y*x*y ⟧^5,
  (x*y*x*y*x*y⁻¹)^3*(x*y*x*y⁻¹*x*y⁻¹)^3, (x*y*(x*y*x*y⁻¹)^3)^4,
  t^2, ⟦t,x⟧, ⟦t,y*x*y*(x*y⁻¹)^2*(x*y)^3⟧, (y*(t ↑↑ y*x*y⁻¹*x*y*x*y⁻¹*x))^3,
  ((y*x*y*x*y*x*y)^3 * t * (t ↑↑ (x*y)^3*y*(x*y)^6*y))^2 }⟫
end J4
/- Presentation of the Rudvalis group, following the paper
   J.D. Bradley, R.T. Curtis and M. Aslam Malik,
   Symmetric generation of the Rudvalis group
   https://doi.org/10.1112/jlms/jdq039
   Section 4.4 -/

namespace Ru
def u : free_group $ dfin 3 := ⟪(by to_dfin 0)⟫
def v : free_group $ dfin 3 := ⟪(by to_dfin 1)⟫
def t : free_group $ dfin 3 := ⟪(by to_dfin 2)⟫
end Ru
section Ru
open Ru
/-- the Rudvalis group -/
@[fabstract]
def Ru : Group := ⟪dfin 3 | {u^4, v^2, (u*v)^7, (u^2*v)^3, t^2, ⟦t,u↑↑v⟧, ⟦t,v↑↑u⟧,
                            (u*t)^10, (u*v*u*t)^13, (u*⟦t,u⁻¹⟧*⟦t↑↑u^2, ⟦u⁻¹, t⟧⟧)^3,
                            ((u*t↑↑u*v)*(t*u^2)^4*(t↑↑u*v))^2, (u*(t↑↑v)*⟦t↑↑u*v,u⟧^2)^2}⟫
end Ru

-- run_cmd fabstract_attr.get_cache >>= tactic.trace 