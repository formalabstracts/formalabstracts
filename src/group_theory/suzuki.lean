import ..data.dvector .presentation .monster
open category_theory (mk_ob)

local notation `⟪`:50 a `⟫`:50 := free_group.of a
local notation h :: t  := dvector.cons h t
local notation `[` l:(foldr `, ` (h t, dvector.cons h t) dvector.nil `]`) := l

/- From the corresponding entry in the atlas (p. 128) Suz . 2 is a quotient of the group given
  by a certain Coxeter-type presentation   -/

open coxeter_vertices
namespace suzuki
/-- We represent the diagram a--b--c-8-d--e--f--g--h as an annotation of the unlabelled
    coxeter Y-diagram of shape [2,5], so that c is the torso and d belongs to the second arm.-/


noncomputable def suzuki_diagram_graph : annotated_graph :=
annotate (annotated_graph_of_graph $ coxeter_edges [2,5])
         (torso, arm (by to_dfin 1) (by to_dfin 0))
         8

noncomputable instance suzuki_diagram_decidable_rel : decidable_rel suzuki_diagram_graph.edge :=
λ _ _, classical.prop_decidable _

/-- The group generated by the Coxeter-Dynkin diagram a--b--c-8-d--e--f--g--h -/
noncomputable def suzuki_diagram_group : Group :=
coxeter_group $ matrix_of_annotated_graph suzuki_diagram_graph

private def a : suzuki_diagram_group := generated_of $ arm (by to_dfin 0) (by to_dfin 1)
private def b : suzuki_diagram_group := generated_of $ arm (by to_dfin 0) (by to_dfin 0)
private def c : suzuki_diagram_group := generated_of $ torso
private def d : suzuki_diagram_group := generated_of $ arm (by to_dfin 1) (by to_dfin 0)
private def e : suzuki_diagram_group := generated_of $ arm (by to_dfin 1) (by to_dfin 1)
private def f : suzuki_diagram_group := generated_of $ arm (by to_dfin 1) (by to_dfin 2)
private def g : suzuki_diagram_group := generated_of $ arm (by to_dfin 1) (by to_dfin 3)
private def h : suzuki_diagram_group := generated_of $ arm (by to_dfin 1) (by to_dfin 4)

/-- Suz.2 is the above group quotiented by additional relations -/
noncomputable def Suz_2 : Group := suzuki_diagram_group/⟪{(c*d)^4*a⁻¹,(b*c*d*e)^8,(b*c*d*c*d*e*f*g*h)^13}⟫

/- Since Suz is simple, and we have an exact sequence 1 → Suz → Suz_2 → C_2 → 1,
   we can reconstruct it from Suz_2 by taking the derived subgroup of Suz_2 -/
noncomputable def Suz : Group := category_theory.mk_ob $ derived_subgroup Suz_2

end suzuki
